import { ObjectId } from 'mongodb';
import sha1 from 'sha1';
import Queue from 'bull';
import dbClient from '../utils/db';
import userUtils from '../utils/user';

const userQueue = new Queue('userQueue');

class UsersController {
  /**
   * Creates a user using email and password.
   *
   * To create a user, you must specify an email and a password.
   * If the email or password is missing, return an error with
   * a status code 400.
   * If the email already exists in DB, return an error with
   * a status code 400.
   * The password must be stored after being hashed in SHA1.
   * The endpoint is returning the new user with only the email and the id
   * (auto generated by MongoDB) with a status code 201.
   * The new user must be saved in the collection users:
   * email: same as the value received
   * password: SHA1 value of the value received
   */
  static async postNew(request, response) {
    const { email, password } = request.body;

    try {
      // Check if email and password are provided
      if (!email) throw { status: 400, message: 'Missing email' };
      if (!password) throw { status: 400, message: 'Missing password' };

      // Check if the email already exists in the database
      const emailExists = await dbClient.usersCollection.findOne({ email });
      if (emailExists) throw { status: 400, message: 'Already exist' };

      // Hash the password using SHA1
      const sha1Password = sha1(password);

      // Create a new user in the database
      const result = await dbClient.usersCollection.insertOne({
        email,
        password: sha1Password,
      });

      const user = { id: result.insertedId, email };

      // Add user to the queue
      await userQueue.add({ userId: result.insertedId.toString() });

      return response.status(201).send(user);
    } catch (error) {
      // Handle errors
      if (error.status) {
        return response.status(error.status).send({ error: error.message });
      } else {
        await userQueue.add({});
        return response.status(500).send({ error: 'Error creating user.' });
      }
    }
  }

  /**
   * Should retrieve the user based on the token used.
   *
   * Retrieve the user based on the token:
   * If not found, return an error Unauthorized with a
   * status code 401.
   * Otherwise, return the user object (email and id only).
   */
  static async getMe(request, response) {
    try {
      const { userId } = await userUtils.getUserIdAndKey(request);

      const user = await userUtils.getUser({
        _id: ObjectId(userId),
      });

      if (!user) throw { status: 401, message: 'Unauthorized' };

      const processedUser = { id: user._id, ...user };
      delete processedUser._id;
      delete processedUser.password;

      return response.status(200).send(processedUser);
    } catch (error) {
      // Handle errors
      if (error.status) {
        return response.status(error.status).send({ error: error.message });
      } else {
        return response.status(500).send({ error: 'Internal Server Error' });
      }
    }
  }
}

export default UsersController;
